(self.webpackChunklearning_java=self.webpackChunklearning_java||[]).push([[23],{4394:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-46f00bab",path:"/java2020/week02.html",title:"第2周 Java 语法之循环、数组与方法",lang:"zh-CN",frontmatter:{title:"第2周 Java 语法之循环、数组与方法",url:"week02"},excerpt:"",headers:[{level:2,title:"一维数组",slug:"一维数组",children:[{level:3,title:"数组声明",slug:"数组声明",children:[]},{level:3,title:"数组的创建",slug:"数组的创建",children:[]},{level:3,title:"声明的同时创建数组",slug:"声明的同时创建数组",children:[]},{level:3,title:"数组的初始化",slug:"数组的初始化",children:[]},{level:3,title:"数组元素的引用",slug:"数组元素的引用",children:[]},{level:3,title:"数组长度",slug:"数组长度",children:[]},{level:3,title:"遍历数组元素",slug:"遍历数组元素",children:[]},{level:3,title:"增强型 for 循环",slug:"增强型-for-循环",children:[]},{level:3,title:"冒泡排序",slug:"冒泡排序",children:[]},{level:3,title:"数组练习",slug:"数组练习",children:[]}]},{level:2,title:"二维数组",slug:"二维数组",children:[{level:3,title:"二维数组的声明",slug:"二维数组的声明",children:[]},{level:3,title:"二维数组的创建",slug:"二维数组的创建",children:[]},{level:3,title:"声明的数组的同时进行创建",slug:"声明的数组的同时进行创建",children:[]},{level:3,title:"数组元素的使用",slug:"数组元素的使用",children:[]},{level:3,title:"二维数组的初始化",slug:"二维数组的初始化",children:[]},{level:3,title:"数组的遍历",slug:"数组的遍历",children:[]},{level:3,title:"练习",slug:"练习",children:[]}]},{level:2,title:"方法",slug:"方法",children:[{level:3,title:"方法声明",slug:"方法声明",children:[]},{level:3,title:"方法分类",slug:"方法分类",children:[]},{level:3,title:"数组作为方法参数",slug:"数组作为方法参数",children:[]},{level:3,title:"方法重载",slug:"方法重载",children:[]},{level:3,title:"参数的传递问题",slug:"参数的传递问题",children:[]},{level:3,title:"可变参数列表",slug:"可变参数列表",children:[]}]},{level:2,title:"综合案例: 数组移位与统计",slug:"综合案例-数组移位与统计",children:[]}],git:{createdTime:1613908074e3,updatedTime:1614034973e3,contributors:[]},filePathRelative:"java2020/week02.md"}},5092:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="java-语法之循环、数组与方法"><a class="header-anchor" href="#java-语法之循环、数组与方法">#</a> Java 语法之循环、数组与方法</h1><h2 id="一维数组"><a class="header-anchor" href="#一维数组">#</a> 一维数组</h2><p>数组是相同类型的数据按顺序组成的一种引用数据类型</p><h3 id="数组声明"><a class="header-anchor" href="#数组声明">#</a> 数组声明</h3><ul><li><code>数据类型[] 数组名; </code></li><li><code>数据类型 数组名[];</code></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>\n<span class="token keyword">int</span> intAray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数组的创建"><a class="header-anchor" href="#数组的创建">#</a> 数组的创建</h3><h4 id="先声明后创建"><a class="header-anchor" href="#先声明后创建">#</a> 先声明后创建</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名<span class="token punctuation">;</span>\n数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>\nintArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建长度为 10 的整型数组 intArray</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="声明的同时创建数组"><a class="header-anchor" href="#声明的同时创建数组">#</a> 声明的同时创建数组</h3><p><strong>注意：数组长度必须指定。</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建长度为 10 的整型数组 arr</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="数组的初始化"><a class="header-anchor" href="#数组的初始化">#</a> 数组的初始化</h3><p>声明数组的同时给数组赋值，叫做数组的初始化。</p><p>例：<code>int[] arr={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};</code></p><p>数组的长度就是初始化时所给数组元素的个数。</p><h3 id="数组元素的引用"><a class="header-anchor" href="#数组元素的引用">#</a> 数组元素的引用</h3><p><code>数组名[下标];</code></p><p>注意：下标从 0 开始。</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>a[0]</td><td>a[1]</td><td>a[2]</td><td>a[3]</td><td>a[4]</td><td>a[5]</td><td>a[6]</td><td>a[ 7]</td><td>a[8]</td><td>a[9]</td></tr></tbody></table><h3 id="数组长度"><a class="header-anchor" href="#数组长度">#</a> 数组长度</h3><ul><li><code>int[] a = {1,2,3,4,5,6,7,8,9,10};</code></li><li>属性 length 表示数组的长度，如 <code>a. length</code></li></ul><h3 id="遍历数组元素"><a class="header-anchor" href="#遍历数组元素">#</a> 遍历数组元素</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="增强型-for-循环"><a class="header-anchor" href="#增强型-for-循环">#</a> 增强型 for 循环</h3><p>也称为 foreach 循环。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> intArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections02ArrayDemo.java">course-java2020/src/com/imooc/java2020/week02/Sections02ArrayDemo.java</a></p><h3 id="冒泡排序"><a class="header-anchor" href="#冒泡排序">#</a> 冒泡排序</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 增强型循环遍历数组</span>\n<span class="token comment">// System.out.print(&quot;排序前数组元素为：&quot;);</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;第 0 次排序后数组元素为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> intNumber <span class="token operator">:</span> intArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>intNumber <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> intArray<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>intArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> intArray<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            temp <span class="token operator">=</span> intArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            intArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> intArray<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            intArray<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;第 &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 次排序后数组元素为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> intNumber <span class="token operator">:</span> intArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>intNumber <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections02BubbleSort.java">course-java2020/src/com/imooc/java2020/week02/Sections02BubbleSort.java</a></p><h3 id="数组练习"><a class="header-anchor" href="#数组练习">#</a> 数组练习</h3><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections02ArrayPractice.java">course-java2020/src/com/imooc/java2020/week02/Sections02ArrayPractice.java</a></p><h2 id="二维数组"><a class="header-anchor" href="#二维数组">#</a> 二维数组</h2><p>二维数组也是存放相同数据类型的数据，可以看成是由多个一维数组组成。二维数组可以包含行和 列，和表格很相似。而每一行就是一个一维数组。</p><h3 id="二维数组的声明"><a class="header-anchor" href="#二维数组的声明">#</a> 二维数组的声明</h3><p>二维数组的声明有三种形式，格式如下：</p><ul><li><code>数据类型[][] 数组名;</code></li><li><code>数据类型 数组名[][];</code></li><li><code>数据类型[] 数组名[];</code></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 声明 int 类型的二维数组</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>\n\n<span class="token comment">//声明 float 类型的二维数组</span>\n<span class="token keyword">float</span> floatArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">//声明 double 类型的二维数组</span>\n<span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubleArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="二维数组的创建"><a class="header-anchor" href="#二维数组的创建">#</a> 二维数组的创建</h3><p><code>数组名 数据类型 = new [行][列];</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 创建一个三行三列的 int 类型的数组</span>\n<span class="token comment">// 先声明后创建</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>\nintArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="声明的数组的同时进行创建"><a class="header-anchor" href="#声明的数组的同时进行创建">#</a> 声明的数组的同时进行创建</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span>行<span class="token punctuation">]</span><span class="token punctuation">[</span>列<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or</span>\n数据类型<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span>行<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n数组名<span class="token punctuation">[</span>行<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>列<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 创建三行三列的二维数组</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建三行多列的二维数组</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 第一行有三列</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 第二行有二列</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 第三行有一列</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="数组元素的使用"><a class="header-anchor" href="#数组元素的使用">#</a> 数组元素的使用</h3><p>与一维数组相似，行列的 index 值均从 0 开始。</p><p>如：已知一个三行三列的整型二维数组 <code>intArray</code>，它的第三行第二列元素为 <code>intArray[2][1]</code>。</p><h3 id="二维数组的初始化"><a class="header-anchor" href="#二维数组的初始化">#</a> 二维数组的初始化</h3><p>与一维数组类似，创建的同时为数组元素赋值，即为数组的初始化。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scoreArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="数组的遍历"><a class="header-anchor" href="#数组的遍历">#</a> 数组的遍历</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scoreArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scoreArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> scoreArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>scoreArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">:</span> scoreArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> score <span class="token operator">:</span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>score <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections03ArrayDemo.java">course-java2020/src/com/imooc/java2020/week02/Sections03ArrayDemo.java</a></p><h3 id="练习"><a class="header-anchor" href="#练习">#</a> 练习</h3><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections03ArrayPractice.java">course-java2020/src/com/imooc/java2020/week02/Sections03ArrayPractice.java</a></p><blockquote><p>注意：</p><ul><li>数组是引用数据类型</li><li>创建数组时,会开辟连续的内存空间</li><li>数组长度使用 length 属性获取</li><li>数组元素的下标从 0 开始</li><li>数组下标越界问题</li></ul></blockquote><h2 id="方法"><a class="header-anchor" href="#方法">#</a> 方法</h2><p>所谓方法，就是用来解决一类问题的代码的有序组合，是一个功能模块。</p><h3 id="方法声明"><a class="header-anchor" href="#方法声明">#</a> 方法声明</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>访问修饰符 返回类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    方法体\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="方法分类"><a class="header-anchor" href="#方法分类">#</a> 方法分类</h3><p>根据方法是否带参数、是否返回值，可分为四类：</p><ul><li>无参无返回值方法 <code>public void printStar()</code></li><li>无参带返回值方法 <code>public int gatRectangleArea()</code></li><li>带参无返回值方法 <code>public void getMaxNumber(double a, double b)</code></li><li>带参带返回值方法 <code>public int getFactorial(int n)</code></li></ul><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections04MethodDemo01.java">course-java2020/src/com/imooc/java2020/week02/Sections04MethodDemo01.java</a></p><h3 id="数组作为方法参数"><a class="header-anchor" href="#数组作为方法参数">#</a> 数组作为方法参数</h3><ul><li><code>public void printArray(int[] arr){}</code></li><li><code>public boolean search(int n,int[] arr){}</code></li><li><code>public void bubbleSort(int[] intArray){}</code></li></ul><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections04MethodDemo02.java">course-java2020/src/com/imooc/java2020/week02/Sections04MethodDemo02.java</a></p><h3 id="方法重载"><a class="header-anchor" href="#方法重载">#</a> 方法重载</h3><p>方法名相同，参数列表不同。</p><ul><li><code>public int getSum(int a, int b) {}</code></li><li><code>public double getSum(double a, double b) {}</code></li><li><code>public int getSum(int[] intArray) {}</code></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">-</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token operator">-</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token operator">-</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//√</span>\n<span class="token operator">-</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//√</span>\n<span class="token operator">-</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">float</span> f1<span class="token punctuation">,</span><span class="token keyword">float</span> f2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//√</span>\n<span class="token operator">-</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections04MethodDemo03.java">course-java2020/src/com/imooc/java2020/week02/Sections04MethodDemo03.java</a></p><h3 id="参数的传递问题"><a class="header-anchor" href="#参数的传递问题">#</a> 参数的传递问题</h3><ul><li>普通变量参数在传递过程中，主方法的的参数值是不会改变的。</li><li>数组参数在传递过程中，主方法的的参数值会改变。</li><li>区别在于：参数在内存中是否指向同一片内存空间。</li></ul><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections04MethodDemo04.java">course-java2020/src/com/imooc/java2020/week02/Sections04MethodDemo04.java</a></p><h3 id="可变参数列表"><a class="header-anchor" href="#可变参数列表">#</a> 可变参数列表</h3><p><code>public void sum(int… n) {}</code></p><ul><li><p>可变参数一定是方法中的最后一个参数。参数列表中如果有两个以上的参数，可变参数一定是在最后的。</p></li><li><p>数组可以传递给可变参数的方法，反之不行。可以将数组传递给可变参数列表，但是可变参数不能传递给数组参数。</p></li><li><p>在重载中，含有可变参数的方法是最后被选中的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//和下面的冲突</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections04MethodDemo05.java">course-java2020/src/com/imooc/java2020/week02/Sections04MethodDemo05.java</a></p><h2 id="综合案例-数组移位与统计"><a class="header-anchor" href="#综合案例-数组移位与统计">#</a> 综合案例: 数组移位与统计</h2><p>需求: 定义一个类，对数组中的数据进行管理。</p><p>方法 ：</p><ul><li>插入数据: <code>public int[] insertData(){}</code> (少接收一个数据，为在指定位置处插入数据做准备)</li><li>显示所有数据: <code>public void showData(int[] a, int length){}</code></li><li>在指定位置处插入数据: <code>public void insertAtArray(int[] a, int n, int k){}</code></li><li>查询能被 3 整除的数据: <code>public void diyThree(int[] a){}</code></li><li>提示信息: <code>public void promptMessage(){}</code></li></ul><p><a href="course-java2020/src/pub/imooc/java2020/week02/Sections05DataManage.java">course-java2020/src/com/imooc/java2020/week02/Sections05DataManage.java</a></p>',85),t={render:function(n,s){return p}}}}]);